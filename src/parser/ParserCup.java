
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import syntax_tree.*;
import syntax_tree.arithOp.*;
import syntax_tree.comp.*;
import syntax_tree.defDeclOp.*;
import syntax_tree.leaf.*;
import syntax_tree.logicOp.*;
import syntax_tree.relOp.*;
import syntax_tree.statOp.*;
import syntax_tree.varInit.*;
import syntax_tree.wrappers.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return LexerSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\002\000\002\005\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\006\000\002\007\004\000\002\010" +
    "\004\000\002\010\002\000\002\011\005\000\002\011\003" +
    "\000\002\012\010\000\002\012\007\000\002\013\004\000" +
    "\002\013\002\000\002\014\007\000\002\014\005\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\006\000\002\017\005\000\002\017\005\000\002\017\006" +
    "\000\002\017\007\000\002\017\006\000\002\017\012\000" +
    "\002\017\010\000\002\017\010\000\002\020\005\000\002" +
    "\020\003\000\002\021\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\004\000\002\022\004\000\002\022\005\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\004\004\005\001\002\000\004\002\176\001" +
    "\002\000\020\005\ufffd\007\010\010\013\011\012\012\017" +
    "\013\007\016\016\001\002\000\004\014\167\001\002\000" +
    "\004\014\ufff9\001\002\000\004\014\ufff8\001\002\000\020" +
    "\005\ufffd\007\010\010\013\011\012\012\017\013\007\016" +
    "\016\001\002\000\004\014\ufff6\001\002\000\004\014\ufff7" +
    "\001\002\000\020\005\ufffd\007\010\010\013\011\012\012" +
    "\017\013\007\016\016\001\002\000\004\005\162\001\002" +
    "\000\004\014\020\001\002\000\004\014\ufff5\001\002\000" +
    "\004\017\021\001\002\000\012\020\027\055\023\056\022" +
    "\057\026\001\002\000\014\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\001\002\000\014\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\001\002\000\014\007\010\010\013\011" +
    "\012\012\017\013\007\001\002\000\004\020\154\001\002" +
    "\000\014\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\001" +
    "\002\000\004\021\030\001\002\000\046\007\010\010\013" +
    "\011\012\012\017\013\007\014\uffeb\017\uffeb\022\uffeb\026" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\040\uffeb\042\uffeb\052\uffeb\001\002\000\020\005\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\016\uffed\001\002" +
    "\000\034\014\047\017\043\022\ufffb\026\035\031\037\032" +
    "\053\033\042\034\050\035\041\036\046\040\045\042\036" +
    "\052\052\001\002\000\046\007\010\010\013\011\012\012" +
    "\017\013\007\014\uffeb\017\uffeb\022\uffeb\026\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\040\uffeb\042" +
    "\uffeb\052\uffeb\001\002\000\034\014\uffec\017\uffec\022\uffec" +
    "\026\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\040\uffec\042\uffec\052\uffec\001\002\000\026\014\063" +
    "\017\043\026\035\031\037\032\053\033\042\034\050\035" +
    "\041\036\046\052\052\001\002\000\004\017\146\001\002" +
    "\000\040\006\uffc8\015\uffc8\020\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\053\uffc8\054\uffc8\001\002\000\036\015\144\020" +
    "\uffdb\024\uffdb\025\067\026\064\027\074\030\072\045\073" +
    "\046\066\047\075\050\071\051\070\053\065\054\076\001" +
    "\002\000\040\006\uffcb\015\uffcb\020\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\045\uffcb\046\uffcb\047\uffcb\050" +
    "\uffcb\051\uffcb\053\uffcb\054\uffcb\001\002\000\040\006\uffc5" +
    "\015\uffc5\020\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\053\uffc5" +
    "\054\uffc5\001\002\000\026\014\063\017\043\026\035\031" +
    "\037\032\053\033\042\034\050\035\041\036\046\052\052" +
    "\001\002\000\004\022\141\001\002\000\004\017\127\001" +
    "\002\000\040\006\uffca\015\uffca\020\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\045\uffca\046\uffca\047\uffca\050" +
    "\uffca\051\uffca\053\uffca\054\uffca\001\002\000\042\015\113" +
    "\017\114\023\uffef\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\037\115\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\053\uffc9\054\uffc9\001\002\000\040\006\uffc6\015\uffc6\020" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\053\uffc6\054\uffc6\001" +
    "\002\000\036\002\ufffb\014\047\017\043\022\ufffb\026\035" +
    "\031\037\032\053\033\042\034\050\035\041\036\046\040" +
    "\045\042\036\052\052\001\002\000\026\014\063\017\043" +
    "\026\035\031\037\032\053\033\042\034\050\035\041\036" +
    "\046\052\052\001\002\000\040\006\uffc7\015\uffc7\020\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\053\uffc7\054\uffc7\001\002" +
    "\000\004\024\060\001\002\000\004\023\056\001\002\000" +
    "\004\006\057\001\002\000\036\002\uffe4\014\uffe4\017\uffe4" +
    "\022\uffe4\026\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\040\uffe4\042\uffe4\052\uffe4\001\002\000\004" +
    "\006\061\001\002\000\036\002\uffe3\014\uffe3\017\uffe3\022" +
    "\uffe3\026\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\040\uffe3\042\uffe3\052\uffe3\001\002\000\040\006" +
    "\uffcd\015\uffcd\020\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\053" +
    "\uffcd\054\uffcd\001\002\000\040\006\uffc9\015\uffc9\020\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\053\uffc9\054\uffc9\001\002" +
    "\000\026\014\063\017\043\026\035\031\037\032\053\033" +
    "\042\034\050\035\041\036\046\052\052\001\002\000\026" +
    "\014\063\017\043\026\035\031\037\032\053\033\042\034" +
    "\050\035\041\036\046\052\052\001\002\000\026\014\063" +
    "\017\043\026\035\031\037\032\053\033\042\034\050\035" +
    "\041\036\046\052\052\001\002\000\026\014\063\017\043" +
    "\026\035\031\037\032\053\033\042\034\050\035\041\036" +
    "\046\052\052\001\002\000\026\014\063\017\043\026\035" +
    "\031\037\032\053\033\042\034\050\035\041\036\046\052" +
    "\052\001\002\000\026\014\063\017\043\026\035\031\037" +
    "\032\053\033\042\034\050\035\041\036\046\052\052\001" +
    "\002\000\026\014\063\017\043\026\035\031\037\032\053" +
    "\033\042\034\050\035\041\036\046\052\052\001\002\000" +
    "\026\014\063\017\043\026\035\031\037\032\053\033\042" +
    "\034\050\035\041\036\046\052\052\001\002\000\026\014" +
    "\063\017\043\026\035\031\037\032\053\033\042\034\050" +
    "\035\041\036\046\052\052\001\002\000\026\014\063\017" +
    "\043\026\035\031\037\032\053\033\042\034\050\035\041" +
    "\036\046\052\052\001\002\000\026\014\063\017\043\026" +
    "\035\031\037\032\053\033\042\034\050\035\041\036\046" +
    "\052\052\001\002\000\040\006\uffd4\015\uffd4\020\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\074\030\072\045\073\046\066" +
    "\047\075\050\071\051\070\053\065\054\uffd4\001\002\000" +
    "\026\006\uffd0\015\uffd0\020\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\053\uffd0\054\uffd0\001\002\000\040\006" +
    "\uffd7\015\uffd7\020\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\045\073\046\066\047\075\050\071\051\070\053" +
    "\uffd7\054\uffd7\001\002\000\026\006\uffd3\015\uffd3\020\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\053\uffd3\054" +
    "\uffd3\001\002\000\040\006\uffd6\015\uffd6\020\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\045\073\046\066\047" +
    "\075\050\071\051\070\053\uffd6\054\uffd6\001\002\000\026" +
    "\006\uffd1\015\uffd1\020\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\053\uffd1\054\uffd1\001\002\000\026\006\uffcf" +
    "\015\uffcf\020\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\053\uffcf\054\uffcf\001\002\000\040\006\uffd8\015\uffd8" +
    "\020\uffd8\024\uffd8\025\uffd8\026\uffd8\027\074\030\072\045" +
    "\073\046\066\047\075\050\071\051\070\053\065\054\uffd8" +
    "\001\002\000\026\006\uffd2\015\uffd2\020\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\053\uffd2\054\uffd2\001\002" +
    "\000\040\006\uffd5\015\uffd5\020\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\045\073\046\066\047\075\050\071" +
    "\051\070\053\uffd5\054\uffd5\001\002\000\040\006\uffd9\015" +
    "\uffd9\020\uffd9\024\uffd9\025\uffd9\026\uffd9\027\074\030\072" +
    "\045\073\046\066\047\075\050\071\051\070\053\065\054" +
    "\uffd9\001\002\000\006\002\ufffc\022\ufffc\001\002\000\004" +
    "\014\125\001\002\000\030\014\063\017\043\020\120\026" +
    "\035\031\037\032\053\033\042\034\050\035\041\036\046" +
    "\052\052\001\002\000\026\014\063\017\043\026\035\031" +
    "\037\032\053\033\042\034\050\035\041\036\046\052\052" +
    "\001\002\000\032\006\117\025\067\026\064\027\074\030" +
    "\072\045\073\046\066\047\075\050\071\051\070\053\065" +
    "\054\076\001\002\000\036\002\uffe2\014\uffe2\017\uffe2\022" +
    "\uffe2\026\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\040\uffe2\042\uffe2\052\uffe2\001\002\000\004\006" +
    "\124\001\002\000\004\020\122\001\002\000\004\006\123" +
    "\001\002\000\036\002\uffe1\014\uffe1\017\uffe1\022\uffe1\026" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\040\uffe1\042\uffe1\052\uffe1\001\002\000\036\002\uffe0\014" +
    "\uffe0\017\uffe0\022\uffe0\026\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\040\uffe0\042\uffe0\052\uffe0\001" +
    "\002\000\006\015\113\023\uffef\001\002\000\004\023\ufff0" +
    "\001\002\000\026\014\063\017\043\026\035\031\037\032" +
    "\053\033\042\034\050\035\041\036\046\052\052\001\002" +
    "\000\032\020\131\025\067\026\064\027\074\030\072\045" +
    "\073\046\066\047\075\050\071\051\070\053\065\054\076" +
    "\001\002\000\004\041\132\001\002\000\004\021\133\001" +
    "\002\000\034\014\047\017\043\022\ufffb\026\035\031\037" +
    "\032\053\033\042\034\050\035\041\036\046\040\045\042" +
    "\036\052\052\001\002\000\040\002\uffde\014\uffde\017\uffde" +
    "\022\uffde\026\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\040\uffde\042\uffde\044\135\052\uffde\001\002" +
    "\000\004\021\133\001\002\000\036\002\uffdf\014\uffdf\017" +
    "\uffdf\022\uffdf\026\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\040\uffdf\042\uffdf\052\uffdf\001\002\000" +
    "\004\022\140\001\002\000\040\002\uffda\014\uffda\017\uffda" +
    "\022\uffda\026\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\uffda\036\uffda\040\uffda\042\uffda\044\uffda\052\uffda\001\002" +
    "\000\020\005\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\016\uffe5\001\002\000\032\020\143\025\067\026\064" +
    "\027\074\030\072\045\073\046\066\047\075\050\071\051" +
    "\070\053\065\054\076\001\002\000\040\006\uffcc\015\uffcc" +
    "\020\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\053\uffcc\054\uffcc" +
    "\001\002\000\026\014\063\017\043\026\035\031\037\032" +
    "\053\033\042\034\050\035\041\036\046\052\052\001\002" +
    "\000\006\020\uffdc\024\uffdc\001\002\000\026\014\063\017" +
    "\043\026\035\031\037\032\053\033\042\034\050\035\041" +
    "\036\046\052\052\001\002\000\032\020\150\025\067\026" +
    "\064\027\074\030\072\045\073\046\066\047\075\050\071" +
    "\051\070\053\065\054\076\001\002\000\004\043\151\001" +
    "\002\000\004\021\133\001\002\000\036\002\uffdd\014\uffdd" +
    "\017\uffdd\022\uffdd\026\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\040\uffdd\042\uffdd\052\uffdd\001\002" +
    "\000\040\006\uffce\015\uffce\020\uffce\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\045\uffce\046\uffce\047\uffce\050\uffce" +
    "\051\uffce\053\uffce\054\uffce\001\002\000\004\021\030\001" +
    "\002\000\020\005\uffee\007\uffee\010\uffee\011\uffee\012\uffee" +
    "\013\uffee\016\uffee\001\002\000\004\014\157\001\002\000" +
    "\006\015\160\020\uffe9\001\002\000\010\055\023\056\022" +
    "\057\026\001\002\000\004\020\uffea\001\002\000\034\002" +
    "\ufffb\014\047\017\043\026\035\031\037\032\053\033\042" +
    "\034\050\035\041\036\046\040\045\042\036\052\052\001" +
    "\002\000\004\002\001\001\002\000\004\005\uffff\001\002" +
    "\000\004\005\ufffe\001\002\000\004\006\175\001\002\000" +
    "\010\006\ufff1\015\ufff1\037\171\001\002\000\006\006\ufff3" +
    "\015\173\001\002\000\026\014\063\017\043\026\035\031" +
    "\037\032\053\033\042\034\050\035\041\036\046\052\052" +
    "\001\002\000\034\006\ufff2\015\ufff2\025\067\026\064\027" +
    "\074\030\072\045\073\046\066\047\075\050\071\051\070" +
    "\053\065\054\076\001\002\000\004\014\167\001\002\000" +
    "\004\006\ufff4\001\002\000\052\005\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\012\ufffa\013\ufffa\014\ufffa\016\ufffa\017\ufffa\022" +
    "\ufffa\026\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa" +
    "\036\ufffa\040\ufffa\042\ufffa\052\ufffa\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\014\005\013\006\005\012\010\001\001\000\004" +
    "\007\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\164\005\013\006\005\012\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\163\005\013\006" +
    "\005\012\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\024\015" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\030\001\001\000\010\005\032\006\005\013\031" +
    "\001\001\000\002\001\001\000\014\004\043\011\054\017" +
    "\050\020\053\022\037\001\001\000\010\005\032\006\005" +
    "\013\033\001\001\000\002\001\001\000\004\022\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\111\011" +
    "\054\017\050\020\053\022\037\001\001\000\004\022\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\110\001\001\000\004\022\107\001\001\000\004" +
    "\022\106\001\001\000\004\022\105\001\001\000\004\022" +
    "\104\001\001\000\004\022\103\001\001\000\004\022\102" +
    "\001\001\000\004\022\101\001\001\000\004\022\100\001" +
    "\001\000\004\022\077\001\001\000\004\022\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\125" +
    "\001\001\000\006\020\120\022\037\001\001\000\004\022" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\133\001\001\000\014\004\136\011\054" +
    "\017\050\020\053\022\037\001\001\000\002\001\001\000" +
    "\004\021\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\144\022\037\001\001\000\002" +
    "\001\001\000\004\022\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\160" +
    "\015\023\001\001\000\002\001\001\000\014\004\162\011" +
    "\054\017\050\020\053\022\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\167\001\001\000\002\001\001\000\004\022\171" +
    "\001\001\000\002\001\001\000\004\007\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= HEAD Decls START Statements 
            {
              Programma RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Statements statements = (Statements)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Programma("ProgrammaOp", decls, statements); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Programma start_val = (Programma)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= Var_decl Decls 
            {
              Decls RESULT =null;
		int var_declleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int var_declright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		VarDecl var_decl = (VarDecl)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = decls.addChild(var_decl); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= Def_decl Decls 
            {
              Decls RESULT =null;
		int def_declleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int def_declright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		DefDecl def_decl = (DefDecl)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = decls.addChild(def_decl); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              Decls RESULT =null;
		 RESULT = new Decls("DeclsOp"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statements ::= Stat Statements 
            {
              Statements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Statements stmt = (Statements)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = stmt.addChild(s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statements ::= 
            {
              Statements RESULT =null;
		 RESULT = new Statements("StatementsOp"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Var_decl ::= Type Var_decls_init SEMI 
            {
              VarDecl RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		TypeLeaf tp = (TypeLeaf)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int vdileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vdiright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		VarDeclsInit vdi = (VarDeclsInit)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new VarDecl("VarDeclsOp", tp, vdi); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decl",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              TypeLeaf RESULT =null;
		 RESULT = new TypeLeaf("Type", new Leaf("Value", "INT") ); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              TypeLeaf RESULT =null;
		 RESULT = new TypeLeaf("Type", new Leaf("Value", "BOOL") ); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= DOUBLE 
            {
              TypeLeaf RESULT =null;
		 RESULT = new TypeLeaf("Type", new Leaf("Value", "DOUBLE")); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              TypeLeaf RESULT =null;
		 RESULT = new TypeLeaf("Type", new Leaf("Value", "STRING")); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              TypeLeaf RESULT =null;
		 RESULT = new TypeLeaf("Type", new Leaf("Value", "CHAR")); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Var_decls_init ::= ID Var_init_value COMMA Var_decls_init 
            {
              VarDeclsInit RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int vivleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int vivright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		VarInitValue viv = (VarInitValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int vdileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vdiright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		VarDeclsInit vdi = (VarDeclsInit)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 VarDeclsWrapper vdw = (viv == null)? new VarNotInit ("VarNotInitOp", new IdLeaf("ID",new Leaf("ID",id))) 
																		   					   		   		  : new VarInit("VarInitOp", new IdLeaf("ID",new Leaf("ID",id)), viv);
																		   					   		   			RESULT = vdi.addChild(vdw); 
																		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decls_init",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Var_decls_init ::= ID Var_init_value 
            {
              VarDeclsInit RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int vivleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vivright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		VarInitValue viv = (VarInitValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
			
																			VarDeclsWrapper vdw = (viv == null)	? new VarNotInit("VarNotInitOp", new IdLeaf("ID",new Leaf("ID",id)))  
																		   					    			: new VarInit("VarInitOp", new IdLeaf("ID",new Leaf("ID",id)), viv);
																		 									RESULT = new VarDeclsInit ("VarDeclsInitOp").addChild(vdw);
																		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decls_init",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Var_init_value ::= ASSIGN Expr 
            {
              VarInitValue RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprWrapper e = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new VarInitValue("VarInitValueOp", e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_init_value",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Var_init_value ::= 
            {
              VarInitValue RESULT =null;
		 RESULT = null; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_init_value",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Vars ::= ID COMMA Vars 
            {
              Vars RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Vars vars = (Vars)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = vars.addChild(new IdLeaf("ID",new Leaf("ID",id))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Vars",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Vars ::= ID 
            {
              Vars RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Vars("VarsOp").addChild(new IdLeaf("ID",new Leaf("ID",id))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Vars",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Def_decl ::= DEF ID LPAR Par_decls RPAR Body 
            {
              DefDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ParDecls par = (ParDecls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new DefDecl("DefDeclOp", new DefDeclOpWithPar("DefDeclOpWithPar",new IdLeaf("ID",new Leaf("ID",id)), par, b)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Def_decl",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Def_decl ::= DEF ID LPAR RPAR Body 
            {
              DefDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new DefDecl("DefDeclOp", new DefDeclOp("DefDeclWithOutPar", new IdLeaf("ID",new Leaf("ID",id)), b)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Def_decl",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Var_decls ::= Var_decl Var_decls 
            {
              VarDecls RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		VarDecls vds = (VarDecls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		   RESULT = vds.addChild(vd); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decls",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Var_decls ::= 
            {
              VarDecls RESULT =null;
		 RESULT = new VarDecls("VarDeclsOp"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decls",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Par_decls ::= Par_type Type ID COMMA Par_decls 
            {
              ParDecls RESULT =null;
		int parTypeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int parTyperight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		ParTypeLeaf parType = (ParTypeLeaf)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		TypeLeaf type = (TypeLeaf)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int parDeclsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int parDeclsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ParDecls parDecls = (ParDecls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = parDecls.addChild(new ParDecls("Par_declsOp",parType, type, new IdLeaf("ID",new Leaf("ID",id)))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Par_decls",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Par_decls ::= Par_type Type ID 
            {
              ParDecls RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ParTypeLeaf par = (ParTypeLeaf)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TypeLeaf type = (TypeLeaf)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ParDecls("Par_declsOp").addChild(new ParDecls("Par_declsOp",par,type,new IdLeaf("ID",new Leaf("ID",id)))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Par_decls",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Par_type ::= IN 
            {
              ParTypeLeaf RESULT =null;
		 RESULT = new ParTypeLeaf("IN", new Leaf("Value", "in")); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Par_type",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Par_type ::= OUT 
            {
              ParTypeLeaf RESULT =null;
		 RESULT = new ParTypeLeaf("OUT", new Leaf("Value", "out")); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Par_type",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Par_type ::= INOUT 
            {
              ParTypeLeaf RESULT =null;
		 RESULT = new ParTypeLeaf("INOUT", new Leaf("Value", "inout")); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Par_type",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Body ::= LGPAR Var_decls Statements RGPAR 
            {
              Body RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		VarDecls vd = (VarDecls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Body("BodyOp", vd, s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Body",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stat ::= Vars READ SEMI 
            {
              Stat RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Vars vars = (Vars)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new Stat("ReadOp", vars); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stat ::= Args WRITE SEMI 
            {
              Stat RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new Stat("WriteOp", args); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stat ::= ID ASSIGN Expr SEMI 
            {
              Stat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ExprWrapper e1 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Stat("AssignOp",new IdLeaf("ID",new Leaf("ID",id)), e1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stat ::= ID LPAR Args RPAR SEMI 
            {
              Stat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new Stat("CallOp", new IdLeaf("ID",new Leaf("ID",id)), args ); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stat ::= ID LPAR RPAR SEMI 
            {
              Stat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		 RESULT = new Stat("CallOp", new IdLeaf("ID",new Leaf("ID",id))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= IF LPAR Expr RPAR THEN Comp_stat ELSE Comp_stat 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		ExprWrapper e = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int cs1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int cs1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		CompStat cs1 = (CompStat)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int cs2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int cs2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		CompStat cs2 = (CompStat)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Stat("IfThenElseOp", e, cs1, cs2 );  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= IF LPAR Expr RPAR THEN Comp_stat 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		ExprWrapper e = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		CompStat cs = (CompStat)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Stat("IfThenOp", e, cs); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= WHILE LPAR Expr RPAR DO Comp_stat 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		ExprWrapper e = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		CompStat cs = (CompStat)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Stat("WhileOp", e, cs); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Args ::= Expr COMMA Args 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprWrapper e = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Args arg1 = (Args)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = arg1.addChild(e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Args",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Args ::= Expr 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprWrapper e = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Args("ArgsOp").addChild(e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Args",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Comp_stat ::= LGPAR Statements RGPAR 
            {
              CompStat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = s; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Comp_stat",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= Expr MINUS Expr 
            {
              ExprWrapper RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprWrapper e1 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprWrapper e2 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new SubOp("SubOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= Expr PLUS Expr 
            {
              ExprWrapper RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprWrapper e1 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprWrapper e2 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new AddOp("AddOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= Expr TIMES Expr 
            {
              ExprWrapper RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprWrapper e1 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprWrapper e2 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new MultOp("MultOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr ::= Expr DIV Expr 
            {
              ExprWrapper RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprWrapper e1 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprWrapper e2 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new DivOp("DivOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr ::= Expr AND Expr 
            {
              ExprWrapper RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprWrapper e1 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprWrapper e2 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new AndOp("AndOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr ::= Expr OR Expr 
            {
              ExprWrapper RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprWrapper e1 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprWrapper e2 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new OrOp("OrOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= Expr GT Expr 
            {
              ExprWrapper RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprWrapper e1 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprWrapper e2 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new GtOp("GtOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= Expr GE Expr 
            {
              ExprWrapper RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprWrapper e1 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprWrapper e2 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new GeOp("GeOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= Expr LE Expr 
            {
              ExprWrapper RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprWrapper e1 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprWrapper e2 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LeOp("LeOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr ::= Expr LT Expr 
            {
              ExprWrapper RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprWrapper e1 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprWrapper e2 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LtOp("LtOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr ::= Expr EQ Expr 
            {
              ExprWrapper RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ExprWrapper e1 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprWrapper e2 = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new EqOp("EqOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= MINUS Expr 
            {
              ExprWrapper RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprWrapper e = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UminusOp("UminusOp", e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr ::= NOT Expr 
            {
              ExprWrapper RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ExprWrapper e = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new NotOp("NotOp", e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= LPAR Expr RPAR 
            {
              ExprWrapper RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ExprWrapper e = (ExprWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= TRUE 
            {
              ExprWrapper RESULT =null;
		 RESULT = new TrueLeaf("TRUE", new Leaf("Value", "true") ); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= FALSE 
            {
              ExprWrapper RESULT =null;
		 RESULT = new FalseLeaf("FALSE", new Leaf("Value", "false")); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= ID 
            {
              ExprWrapper RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new IdLeaf("ID", new Leaf("Value", id)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= INT_CONST 
            {
              ExprWrapper RESULT =null;
		int intConstleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int intConstright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String intConst = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new IntConstLeaf("INT_CONST", new Leaf("Value", intConst)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= DOUBLE_CONST 
            {
              ExprWrapper RESULT =null;
		int doubleConstleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int doubleConstright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String doubleConst = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new DoubleConstLeaf("DOUBLE_CONST", new Leaf("Value", doubleConst)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= CHAR_CONST 
            {
              ExprWrapper RESULT =null;
		int charConstleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int charConstright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String charConst = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new CharConstLeaf("CHAR_CONST", new Leaf("Value", charConst)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= STRING_CONST 
            {
              ExprWrapper RESULT =null;
		int stringConstleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int stringConstright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new StringConstLeaf("STRING_CONST", new Leaf("Value", stringConst) ); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
