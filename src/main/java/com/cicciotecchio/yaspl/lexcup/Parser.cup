package com.cicciotecchio.yaspl.parser;

import java_cup.runtime.*;
import com.cicciotecchio.yaspl.syntaxTree.*;
import com.cicciotecchio.yaspl.syntaxTree.arithOp.*;
import com.cicciotecchio.yaspl.syntaxTree.components.*;
import com.cicciotecchio.yaspl.syntaxTree.logicOp.*;
import com.cicciotecchio.yaspl.syntaxTree.relOp.*;
import com.cicciotecchio.yaspl.syntaxTree.statOp.*;
import com.cicciotecchio.yaspl.syntaxTree.wrapper.*;
import com.cicciotecchio.yaspl.syntaxTree.varDeclInitOp.*;
import com.cicciotecchio.yaspl.syntaxTree.leaf.*;
import com.cicciotecchio.yaspl.syntaxTree.utils.*;
import com.cicciotecchio.yaspl.syntaxTree.declsOp.*;
import com.cicciotecchio.yaspl.exception.SyntaxErrorException;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java.util.logging.Logger;

parser code{:  

	private static Logger logger = Logger.getLogger("Parser");

	public void report_error(String message, Object info) {
         if (info instanceof ComplexSymbol) {
           ComplexSymbol cs = (ComplexSymbol)info;
           logger.severe(message + " for input symbol \"" + cs.getName() + "\" spanning from " + cs.getLeft() + " to " + cs.getRight());
         } else {
             this.logger.severe(message);
             if (info instanceof Symbol) {
               if (((Symbol)info).left != -1) {
                 logger.severe(" at character " + ((Symbol)info).left + " of input");
               } else {
                  this.logger.severe("");
               }
             }
         }
       }
    
:}


/*List of terminals*/
terminal HEAD;
terminal START;
terminal SEMI; 
terminal BOOL;
terminal DOUBLE;
terminal STRING;
terminal CHAR;
terminal String ID;
terminal COMMA;
terminal DEF;
terminal LPAR;
terminal RPAR; 
terminal LGPAR;
terminal RGPAR;
terminal READ;
terminal WRITE; 
terminal PLUS;
terminal MINUS; 
terminal TIMES;
terminal DIV;
terminal String INT_CONST;
terminal String DOUBLE_CONST;
terminal String STRING_CONST;
terminal String CHAR_CONST;
terminal TRUE;
terminal FALSE;
terminal ASSIGN;
terminal IF;
terminal THEN;
terminal WHILE;
terminal DO;
terminal ELSE;
terminal GT;
terminal GE;
terminal LT;
terminal LE;
terminal EQ;
terminal NOT;
terminal AND;
terminal OR;
terminal IN;
terminal OUT;
terminal INOUT;
terminal INT;
terminal UMINUS; /*is the Symbol '-'  used for unary Internal*/ 

/*List of non teminals*/  
non terminal	Programma			Programma; 
non terminal	Decls		 		Decls;
non terminal	Statements			Statements; 
non terminal	VarDecl				Var_decl;
non terminal	TypeLeaf			Type;
non terminal	VarDeclsInit		Var_decls_init;
non terminal	VarInitValue		Var_init_value;
non terminal	Vars				Vars;
non terminal	DeclsWrapper		Def_decl;
non terminal	VarDecls			Var_decls;
non terminal	ParDecls			Par_decls;  
non terminal	ParTypeLeaf			Par_type;
non terminal	Body				Body;
non terminal	Stat				Stat;
non terminal	Args				Args;
non terminal	CompStat			Comp_stat;
non terminal	Expr				Expr;

/*List of precedences*/
precedence nonassoc  ELSE; 
precedence left PLUS,MINUS,OR;
precedence left TIMES,DIV,AND;
precedence nonassoc GT, GE, LT, LE, EQ; 
precedence left UMINUS, NOT, COMMA;	 

/*Grammar*/												
Programma 	::= HEAD:h Decls:decls START Statements:s							{: RESULT = new Programma(hxleft, hxright, "Programma", decls, s); :}
			; 
																
Decls 		::= Var_decl:var Decls:decls									{: RESULT = decls.addChild(var); :}
			|	Def_decl:def Decls:decls									{: RESULT = decls.addChild(def); :}
			|	 /*epsilon*/												{: RESULT = new Decls(null, null, "Decls"); :}
			;
Statements	::=	Stat:s Statements:stmt										{: RESULT = stmt.addChild(s); :}
			|	 /*epsilon*/												{: RESULT = new Statements(null, null, "Statements"); :}
			;
Var_decl	::=	Type:tp Var_decls_init:vdi SEMI								{: RESULT = new VarDecl(tpxleft, tpxright, "VarDecl", tp, vdi); :}
			; 
Type		::=	INT:intero													{: RESULT = new TypeLeaf(interoxleft, interoxright, "Type", "INT"); :}
			|	BOOL:bool 													{: RESULT = new TypeLeaf(boolxleft, boolxright, "Type", "BOOL"); :}
			|	DOUBLE:dbl													{: RESULT = new TypeLeaf(dblxleft, dblxright, "Type", "DOUBLE"); :}
			|	STRING:str													{: RESULT = new TypeLeaf(strxleft, strxright, "Type", "STRING"); :}
			|	CHAR:chr													{: RESULT = new TypeLeaf(chrxleft, chrxright, "Type", "CHAR"); :}
			;
			
Var_decls_init	::=	ID:id Var_init_value:viv COMMA Var_decls_init:vdi		{: RESULT = (viv == null)
																					? vdi.addChild(new VarNotInit(idxleft, idxright, "VarNotInit", new IdConst(idxleft, idxright,"Id", new Leaf(idxleft, idxright,"Value", id))))
																					: vdi.addChild(new VarInit(idxleft, idxright, "VarInit", new IdConst(idxleft, idxright,"Id", new Leaf(idxleft, idxright,"Value", id)), viv)); :}
				|	ID:id Var_init_value:viv								{: RESULT = (viv == null) 
																					? (new VarDeclsInit(idxleft, idxright, "VarDeclsInit")).addChild(new VarNotInit(idxleft, idxright,"VarNotInit", new IdConst(idxleft, idxright,"Id", new Leaf(idxleft, idxright, "Value", id))))
																					: (new VarDeclsInit(idxleft, idxright, "VarDeclsInit")).addChild(new VarInit(idxleft, idxright, "VarInit", new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id)), viv)); :}
				;
Var_init_value	::= ASSIGN:assing Expr:e									{: RESULT = new VarInitValue(assingxleft, assingxright, "VarInitValue", e); :}
				|	/*epsilon*/												{: RESULT = null; :}
				;
Vars		::=	ID:id COMMA Vars:vars										{: RESULT = vars.addChild(new IdConst(idxleft, idxright,"Id", new Leaf(idxleft, idxright,"Value", id))); :}
			|	ID:id														{: RESULT = new Vars(idxleft, idxright,"Vars").addChild(new IdConst(idxleft, idxright,"Id", new Leaf(idxleft, idxright, "Value", id))); :}
			;
Def_decl	::=	DEF:d ID:id LPAR Par_decls:par RPAR Body:b					{: RESULT = new DefDeclPar(dxleft, dxright, "DefDecl", new IdConst(idxleft, idxright,"Id", new Leaf(idxleft, idxright,"Value", id)), par, b); :}
			|	DEF:d ID:id LPAR RPAR Body:b								{: RESULT = new DefDeclNoPar(dxleft, dxright, "DefDecl", new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id)), b); :}
			;
Var_decls	::=	Var_decl:vd Var_decls:vds									{: RESULT = vds.addChild(vd); :}
			|	/*epsilon*/													{: RESULT = new VarDecls(null, null, "VarDecls"); :}
			;
Par_decls	::=	Par_type:par Type:type ID:id COMMA Par_decls:parDecls		{: RESULT = parDecls
																						.addChild(new ParDeclSon(idxleft, idxright, "ParDeclSon", par, type, new IdConst(idxleft, idxright,"Id", new Leaf(idxleft, idxright,"Value", id))));:}
			|	Par_type:par Type:type ID:id								{: RESULT = new ParDecls(idxleft, idxright, "ParDeclsOp")
																						.addChild(new ParDeclSon(idxleft, idxright, "ParDeclSon", par, type, new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id))));:}
			;
			
Par_type	::=	IN:in															{: RESULT = new ParTypeLeaf(inxleft, inxright, "ParType", "IN"); :}
			|	OUT:out															{: RESULT = new ParTypeLeaf(outxleft, outxright, "ParType", "OUT"); :}
			|	INOUT:inout														{: RESULT = new ParTypeLeaf(inoutxleft, inoutxright, "ParType", "INOUT"); :}
			;
			
Body		::=	LGPAR:lgpar Var_decls:vd Statements:s RGPAR						{: RESULT = new Body(lgparxleft, lgparxright, "Body", vd, s); :}
			;
			
Stat		::= Vars:vars READ:read SEMI									{: RESULT = new ReadOp(readxleft, readxright, "ReadOp", vars); :}
			|	Args:args WRITE:write SEMI									{: RESULT = new WriteOp(writexleft, writexright, "WriteOp", args); :}
			|	ID:id ASSIGN:assing Args:e1 SEMI							{: RESULT = new AssignOp(assingxleft, assingxright, "AssignOp", new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id)), e1); :}
			|	ID:id LPAR Args:args RPAR SEMI								{: RESULT = new CallOp(idxleft, idxright, "CallOpWithArgs", new IdConst(idxleft, idxright,"Id", new Leaf(idxleft, idxright,"Value", id)), args); :}
			|	ID:id LPAR RPAR SEMI									 	{: RESULT = new CallOp(idxleft, idxright, "CallOp", new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id))); :}
			|	IF:se LPAR Expr:e RPAR THEN Comp_stat:cs1 ELSE Comp_stat:cs2	{: RESULT = new IfThenElseOp(sexleft, sexright,"IfThenElseOp", e, cs1, cs2); :}
			|	IF:se LPAR Expr:e RPAR THEN Comp_stat:cs					{: RESULT = new IfThenOp(sexleft, sexright,"IfThenOp", e, cs); :}
			|	WHILE:whl LPAR Expr:e RPAR DO Body:b						{: RESULT = new WhileOp(whlxleft, whlxright,"WhileOp", e, b); :}
			;
			
Args		::=	Expr:e COMMA Args:arg		{: RESULT = arg.addChild(e); :}
			| 	ID:id  COMMA Args:arg		{: RESULT = arg.addChild(new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id))); :}
			|	Expr:e						{: RESULT = new Args(null, null, "ArgsOp").addChild(e); :}
			;
			
Comp_stat	::=	LGPAR Statements:s RGPAR 	{: RESULT = new CompStat(sxleft, sxright, "CompStat", s); :}
			;

Expr		::=	Expr:e1 MINUS:minus Expr:e2		{: RESULT = new SubOp(minusxleft, minusxright, "SubOp", e1, e2); :}
			|	Expr:e1 PLUS:plus Expr:e2 		{: RESULT = new AddOp(plusxleft, plusxright, "AddOp", e1, e2); :}
			|	Expr:e1 TIMES:times Expr:e2		{: RESULT = new MultOp(timesxleft, timesxright, "MultOp", e1, e2); :}
			|	Expr:e1 DIV:div Expr:e2			{: RESULT = new DivOp(divxleft, divxright, "DivOp", e1, e2); :}
			|	Expr:e1 AND:and Expr:e2			{: RESULT = new AndOp(andxleft, andxright, "AndOp", e1, e2); :}
			|	Expr:e1 OR:or Expr:e2			{: RESULT = new OrOp(orxleft, orxright, "OrOp", e1, e2); :}
			|	Expr:e1 GT:gt Expr:e2			{: RESULT = new GtOp(gtxleft, gtxright, "GtOp", e1, e2); :}
			|	Expr:e1 GE:ge Expr:e2			{: RESULT = new GeOp(gexleft, gexright, "GeOp", e1, e2); :}
			|	Expr:e1 LE:le Expr:e2			{: RESULT = new LeOp(lexleft, lexright, "LeOp", e1, e2); :}
			|	Expr:e1 LT:lt Expr:e2			{: RESULT = new LtOp(ltxleft, ltxright, "LtOp", e1, e2); :}
			|	Expr:e1 EQ:eq Expr:e2			{: RESULT = new EqOp(eqxleft, eqxright, "EqOp", e1, e2); :}
			|	MINUS:minus Expr:e 				{: RESULT = new UminusOp(minusxleft, minusxright, "UminusOp", e); :} %prec UMINUS
			|	NOT:not Expr:e					{: RESULT = new NotOp(notxleft, notxright, "NotOp", e); :}
			|	LPAR Expr:e RPAR			{: RESULT = e; :}
			|	TRUE:t						{: RESULT = new BoolConst(txleft, txright, "BoolConst", new Leaf(txleft, txright, "Value", "true")); :}
			|	FALSE:f						{: RESULT = new BoolConst(fxleft, fxright, "BoolConst", new Leaf(fxleft, fxright, "Value", "false")); :}
			|	ID:id						{: RESULT = new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id)); :}
			|	INT_CONST:intConst 			{: RESULT = new IntConst(intConstxleft, intConstxright, "IntConst", new Leaf(intConstxleft, intConstxright, "Value", intConst)); :}
			|	DOUBLE_CONST:doubleConst	{: RESULT = new DoubleConst(doubleConstxleft, doubleConstxright, "DoubleConst", new Leaf(doubleConstxleft, doubleConstxright,"Value", doubleConst)); :}
			|	CHAR_CONST:charConst		{: RESULT = new CharConst(charConstxleft, charConstxright, "CharConst", new Leaf(charConstxleft, charConstxright, "Value", charConst)); :}
			|	STRING_CONST:stringConst 	{: RESULT = new StringConst(stringConstxleft, stringConstxright, "StringConst", new Leaf(stringConstxleft, stringConstxright, "Value", stringConst)); :}
			;