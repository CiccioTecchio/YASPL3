
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cicciotecchio.yaspl.parser;

import java_cup.runtime.*;
import com.cicciotecchio.yaspl.syntaxTree.*;
import com.cicciotecchio.yaspl.syntaxTree.arithOp.*;
import com.cicciotecchio.yaspl.syntaxTree.components.*;
import com.cicciotecchio.yaspl.syntaxTree.logicOp.*;
import com.cicciotecchio.yaspl.syntaxTree.relOp.*;
import com.cicciotecchio.yaspl.syntaxTree.statOp.*;
import com.cicciotecchio.yaspl.syntaxTree.wrapper.*;
import com.cicciotecchio.yaspl.syntaxTree.varDeclInitOp.*;
import com.cicciotecchio.yaspl.syntaxTree.leaf.*;
import com.cicciotecchio.yaspl.syntaxTree.utils.*;
import com.cicciotecchio.yaspl.syntaxTree.declsOp.*;
import com.cicciotecchio.yaspl.exception.SyntaxErrorException;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return LexerSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\002\000\002\005\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\006\000\002\007\004\000\002\010" +
    "\004\000\002\010\002\000\002\011\005\000\002\011\003" +
    "\000\002\012\010\000\002\012\007\000\002\013\004\000" +
    "\002\013\002\000\002\014\007\000\002\014\005\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\006\000\002\017\005\000\002\017\005\000\002\017\006" +
    "\000\002\017\007\000\002\017\006\000\002\017\012\000" +
    "\002\017\010\000\002\017\015\000\002\017\016\000\002" +
    "\017\010\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\003\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\004\000\002\021\004\000\002\021\005\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\004\004\005\001\002\000\004\002\231\001" +
    "\002\000\020\005\ufffd\010\010\011\013\012\012\013\017" +
    "\016\016\062\007\001\002\000\004\014\222\001\002\000" +
    "\004\014\ufff9\001\002\000\004\014\ufff8\001\002\000\020" +
    "\005\ufffd\010\010\011\013\012\012\013\017\016\016\062" +
    "\007\001\002\000\004\014\ufff6\001\002\000\004\014\ufff7" +
    "\001\002\000\020\005\ufffd\010\010\011\013\012\012\013" +
    "\017\016\016\062\007\001\002\000\004\005\215\001\002" +
    "\000\004\014\020\001\002\000\004\014\ufff5\001\002\000" +
    "\004\017\021\001\002\000\012\020\027\057\023\060\022" +
    "\061\026\001\002\000\014\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\062\uffe7\001\002\000\014\010\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\062\uffe8\001\002\000\014\010\010\011\013\012" +
    "\012\013\017\062\007\001\002\000\004\020\207\001\002" +
    "\000\014\010\uffe6\011\uffe6\012\uffe6\013\uffe6\062\uffe6\001" +
    "\002\000\004\021\030\001\002\000\054\010\010\011\013" +
    "\012\012\013\017\014\uffeb\017\uffeb\022\uffeb\026\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\041\uffeb" +
    "\043\uffeb\044\uffeb\054\uffeb\062\007\064\uffeb\065\uffeb\001" +
    "\002\000\020\005\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\016\uffed\062\uffed\001\002\000\042\014\047\017\057\022" +
    "\ufffb\026\053\032\050\033\037\034\035\035\060\036\043" +
    "\037\054\041\045\043\056\044\040\054\041\064\051\065" +
    "\052\001\002\000\054\010\010\011\013\012\012\013\017" +
    "\014\uffeb\017\uffeb\022\uffeb\026\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\041\uffeb\043\uffeb\044\uffeb" +
    "\054\uffeb\062\007\064\uffeb\065\uffeb\001\002\000\042\014" +
    "\uffec\017\uffec\022\uffec\026\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\036\uffec\037\uffec\041\uffec\043\uffec\044\uffec\054" +
    "\uffec\064\uffec\065\uffec\001\002\000\044\006\uffbe\007\uffbe" +
    "\015\uffbe\020\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030" +
    "\uffbe\031\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\055\uffbe\056\uffbe\001\002\000\044\002\ufffb\014\047\017" +
    "\057\022\ufffb\026\053\032\050\033\037\034\035\035\060" +
    "\036\043\037\054\041\045\043\056\044\040\054\041\064" +
    "\051\065\052\001\002\000\044\006\uffc0\007\uffc0\015\uffc0" +
    "\020\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\055\uffc0" +
    "\056\uffc0\001\002\000\004\017\201\001\002\000\026\014" +
    "\062\017\057\026\053\032\050\033\037\034\035\035\060" +
    "\036\043\037\054\054\041\001\002\000\004\022\177\001" +
    "\002\000\044\006\uffc4\007\uffc4\015\uffc4\020\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\055\uffc4\056\uffc4\001\002" +
    "\000\004\024\175\001\002\000\004\017\166\001\002\000" +
    "\042\007\uffd4\015\164\020\uffd4\024\uffd4\025\067\026\063" +
    "\027\074\030\072\031\065\047\073\050\066\051\076\052" +
    "\071\053\070\055\064\056\077\001\002\000\050\015\141" +
    "\017\142\023\uffef\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\040\145\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\055\uffc2\056\uffc2\064\143\065\144\001\002\000" +
    "\044\006\uffc1\007\uffc1\015\uffc1\020\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\055\uffc1\056\uffc1\001\002\000\004" +
    "\014\137\001\002\000\004\014\135\001\002\000\026\014" +
    "\062\017\057\026\053\032\050\033\037\034\035\035\060" +
    "\036\043\037\054\054\041\001\002\000\044\006\uffc3\007" +
    "\uffc3\015\uffc3\020\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\055\uffc3\056\uffc3\001\002\000\004\023\132\001\002" +
    "\000\004\017\114\001\002\000\026\014\062\017\057\026" +
    "\053\032\050\033\037\034\035\035\060\036\043\037\054" +
    "\054\041\001\002\000\044\006\uffbf\007\uffbf\015\uffbf\020" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\056" +
    "\uffbf\001\002\000\034\020\075\025\067\026\063\027\074" +
    "\030\072\031\065\047\073\050\066\051\076\052\071\053" +
    "\070\055\064\056\077\001\002\000\044\006\uffc2\007\uffc2" +
    "\015\uffc2\020\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\055\uffc2\056\uffc2\001\002\000\026\014\062\017\057\026" +
    "\053\032\050\033\037\034\035\035\060\036\043\037\054" +
    "\054\041\001\002\000\026\014\062\017\057\026\053\032" +
    "\050\033\037\034\035\035\060\036\043\037\054\054\041" +
    "\001\002\000\026\014\062\017\057\026\053\032\050\033" +
    "\037\034\035\035\060\036\043\037\054\054\041\001\002" +
    "\000\026\014\062\017\057\026\053\032\050\033\037\034" +
    "\035\035\060\036\043\037\054\054\041\001\002\000\026" +
    "\014\062\017\057\026\053\032\050\033\037\034\035\035" +
    "\060\036\043\037\054\054\041\001\002\000\026\014\062" +
    "\017\057\026\053\032\050\033\037\034\035\035\060\036" +
    "\043\037\054\054\041\001\002\000\026\014\062\017\057" +
    "\026\053\032\050\033\037\034\035\035\060\036\043\037" +
    "\054\054\041\001\002\000\026\014\062\017\057\026\053" +
    "\032\050\033\037\034\035\035\060\036\043\037\054\054" +
    "\041\001\002\000\026\014\062\017\057\026\053\032\050" +
    "\033\037\034\035\035\060\036\043\037\054\054\041\001" +
    "\002\000\026\014\062\017\057\026\053\032\050\033\037" +
    "\034\035\035\060\036\043\037\054\054\041\001\002\000" +
    "\044\006\uffc5\007\uffc5\015\uffc5\020\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\055\uffc5\056\uffc5\001\002\000\026" +
    "\014\062\017\057\026\053\032\050\033\037\034\035\035" +
    "\060\036\043\037\054\054\041\001\002\000\026\014\062" +
    "\017\057\026\053\032\050\033\037\034\035\035\060\036" +
    "\043\037\054\054\041\001\002\000\044\006\uffcd\007\uffcd" +
    "\015\uffcd\020\uffcd\024\uffcd\025\uffcd\026\uffcd\027\074\030" +
    "\072\031\uffcd\047\073\050\066\051\076\052\071\053\070" +
    "\055\064\056\uffcd\001\002\000\032\006\uffc9\007\uffc9\015" +
    "\uffc9\020\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\055\uffc9\056\uffc9\001\002\000\044\006\uffd1\007" +
    "\uffd1\015\uffd1\020\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\047\073\050\066\051\076\052\071\053" +
    "\070\055\uffd1\056\uffd1\001\002\000\032\006\uffcc\007\uffcc" +
    "\015\uffcc\020\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\055\uffcc\056\uffcc\001\002\000\044\006\uffcf" +
    "\007\uffcf\015\uffcf\020\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\047\073\050\066\051\076\052\071" +
    "\053\070\055\uffcf\056\uffcf\001\002\000\032\006\uffca\007" +
    "\uffca\015\uffca\020\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\055\uffca\056\uffca\001\002\000\032\006" +
    "\uffc8\007\uffc8\015\uffc8\020\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\055\uffc8\056\uffc8\001\002\000" +
    "\044\006\uffd2\007\uffd2\015\uffd2\020\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\074\030\072\031\uffd2\047\073\050\066\051" +
    "\076\052\071\053\070\055\064\056\uffd2\001\002\000\032" +
    "\006\uffcb\007\uffcb\015\uffcb\020\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\055\uffcb\056\uffcb\001\002" +
    "\000\044\006\uffd0\007\uffd0\015\uffd0\020\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\074\030\072\031\uffd0\047\073\050\066" +
    "\051\076\052\071\053\070\055\064\056\uffd0\001\002\000" +
    "\044\006\uffce\007\uffce\015\uffce\020\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\047\073\050\066\051" +
    "\076\052\071\053\070\055\uffce\056\uffce\001\002\000\044" +
    "\006\uffd3\007\uffd3\015\uffd3\020\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\027\074\030\072\031\uffd3\047\073\050\066\051\076" +
    "\052\071\053\070\055\064\056\uffd3\001\002\000\004\014" +
    "\115\001\002\000\004\006\116\001\002\000\026\014\062" +
    "\017\057\026\053\032\050\033\037\034\035\035\060\036" +
    "\043\037\054\054\041\001\002\000\034\006\120\025\067" +
    "\026\063\027\074\030\072\031\065\047\073\050\066\051" +
    "\076\052\071\053\070\055\064\056\077\001\002\000\026" +
    "\014\062\017\057\026\053\032\050\033\037\034\035\035" +
    "\060\036\043\037\054\054\041\001\002\000\034\006\122" +
    "\025\067\026\063\027\074\030\072\031\065\047\073\050" +
    "\066\051\076\052\071\053\070\055\064\056\077\001\002" +
    "\000\006\026\123\032\124\001\002\000\004\032\127\001" +
    "\002\000\004\020\125\001\002\000\004\021\030\001\002" +
    "\000\044\002\uffdd\014\uffdd\017\uffdd\022\uffdd\026\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\041\uffdd" +
    "\043\uffdd\044\uffdd\054\uffdd\064\uffdd\065\uffdd\001\002\000" +
    "\004\020\130\001\002\000\004\021\030\001\002\000\044" +
    "\002\uffdc\014\uffdc\017\uffdc\022\uffdc\026\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\041\uffdc\043\uffdc" +
    "\044\uffdc\054\uffdc\064\uffdc\065\uffdc\001\002\000\004\007" +
    "\133\001\002\000\044\002\uffe4\014\uffe4\017\uffe4\022\uffe4" +
    "\026\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\041\uffe4\043\uffe4\044\uffe4\054\uffe4\064\uffe4\065\uffe4" +
    "\001\002\000\044\006\uffc7\007\uffc7\015\uffc7\020\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\052\uffc7\053\uffc7\055\uffc7\056\uffc7\001" +
    "\002\000\004\007\136\001\002\000\044\002\uffd7\014\uffd7" +
    "\017\uffd7\022\uffd7\026\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\041\uffd7\043\uffd7\044\uffd7\054\uffd7" +
    "\064\uffd7\065\uffd7\001\002\000\004\007\140\001\002\000" +
    "\044\002\uffd9\014\uffd9\017\uffd9\022\uffd9\026\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\041\uffd9\043" +
    "\uffd9\044\uffd9\054\uffd9\064\uffd9\065\uffd9\001\002\000\026" +
    "\014\162\017\057\026\053\032\050\033\037\034\035\035" +
    "\060\036\043\037\054\054\041\001\002\000\030\014\146" +
    "\017\057\020\155\026\053\032\050\033\037\034\035\035" +
    "\060\036\043\037\054\054\041\001\002\000\004\007\154" +
    "\001\002\000\004\007\153\001\002\000\026\014\146\017" +
    "\057\026\053\032\050\033\037\034\035\035\060\036\043" +
    "\037\054\054\041\001\002\000\042\007\uffc2\015\151\020" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\055\uffc2\056" +
    "\uffc2\001\002\000\004\007\150\001\002\000\044\002\uffe2" +
    "\014\uffe2\017\uffe2\022\uffe2\026\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\041\uffe2\043\uffe2\044\uffe2" +
    "\054\uffe2\064\uffe2\065\uffe2\001\002\000\026\014\146\017" +
    "\057\026\053\032\050\033\037\034\035\035\060\036\043" +
    "\037\054\054\041\001\002\000\010\007\uffd5\020\uffd5\024" +
    "\uffd5\001\002\000\044\002\uffd8\014\uffd8\017\uffd8\022\uffd8" +
    "\026\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\041\uffd8\043\uffd8\044\uffd8\054\uffd8\064\uffd8\065\uffd8" +
    "\001\002\000\044\002\uffda\014\uffda\017\uffda\022\uffda\026" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\041\uffda\043\uffda\044\uffda\054\uffda\064\uffda\065\uffda\001" +
    "\002\000\004\007\161\001\002\000\004\020\157\001\002" +
    "\000\004\007\160\001\002\000\044\002\uffe1\014\uffe1\017" +
    "\uffe1\022\uffe1\026\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\041\uffe1\043\uffe1\044\uffe1\054\uffe1\064" +
    "\uffe1\065\uffe1\001\002\000\044\002\uffe0\014\uffe0\017\uffe0" +
    "\022\uffe0\026\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\041\uffe0\043\uffe0\044\uffe0\054\uffe0\064\uffe0" +
    "\065\uffe0\001\002\000\040\015\141\023\uffef\024\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\055\uffc2\056\uffc2\001\002\000" +
    "\004\023\ufff0\001\002\000\026\014\146\017\057\026\053" +
    "\032\050\033\037\034\035\035\060\036\043\037\054\054" +
    "\041\001\002\000\010\007\uffd6\020\uffd6\024\uffd6\001\002" +
    "\000\026\014\062\017\057\026\053\032\050\033\037\034" +
    "\035\035\060\036\043\037\054\054\041\001\002\000\034" +
    "\020\170\025\067\026\063\027\074\030\072\031\065\047" +
    "\073\050\066\051\076\052\071\053\070\055\064\056\077" +
    "\001\002\000\004\042\171\001\002\000\004\021\030\001" +
    "\002\000\046\002\uffde\014\uffde\017\uffde\022\uffde\026\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\041" +
    "\uffde\043\uffde\044\uffde\046\173\054\uffde\064\uffde\065\uffde" +
    "\001\002\000\004\021\030\001\002\000\044\002\uffdf\014" +
    "\uffdf\017\uffdf\022\uffdf\026\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\041\uffdf\043\uffdf\044\uffdf\054" +
    "\uffdf\064\uffdf\065\uffdf\001\002\000\004\007\176\001\002" +
    "\000\044\002\uffe3\014\uffe3\017\uffe3\022\uffe3\026\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\041\uffe3" +
    "\043\uffe3\044\uffe3\054\uffe3\064\uffe3\065\uffe3\001\002\000" +
    "\064\002\uffe5\005\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\016\uffe5\017\uffe5\022\uffe5\026\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\041\uffe5\043\uffe5" +
    "\044\uffe5\046\uffe5\054\uffe5\062\uffe5\064\uffe5\065\uffe5\001" +
    "\002\000\044\006\uffc6\007\uffc6\015\uffc6\020\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6\001\002" +
    "\000\026\014\062\017\057\026\053\032\050\033\037\034" +
    "\035\035\060\036\043\037\054\054\041\001\002\000\034" +
    "\020\203\025\067\026\063\027\074\030\072\031\065\047" +
    "\073\050\066\051\076\052\071\053\070\055\064\056\077" +
    "\001\002\000\004\045\204\001\002\000\004\021\030\001" +
    "\002\000\044\002\uffdb\014\uffdb\017\uffdb\022\uffdb\026\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\041" +
    "\uffdb\043\uffdb\044\uffdb\054\uffdb\064\uffdb\065\uffdb\001\002" +
    "\000\006\002\ufffc\022\ufffc\001\002\000\004\021\030\001" +
    "\002\000\020\005\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\016\uffee\062\uffee\001\002\000\004\014\212\001\002\000" +
    "\006\015\213\020\uffe9\001\002\000\010\057\023\060\022" +
    "\061\026\001\002\000\004\020\uffea\001\002\000\042\002" +
    "\ufffb\014\047\017\057\026\053\032\050\033\037\034\035" +
    "\035\060\036\043\037\054\041\045\043\056\044\040\054" +
    "\041\064\051\065\052\001\002\000\004\002\001\001\002" +
    "\000\004\005\uffff\001\002\000\004\005\ufffe\001\002\000" +
    "\004\007\230\001\002\000\010\007\ufff1\015\ufff1\040\224" +
    "\001\002\000\006\007\ufff3\015\226\001\002\000\026\014" +
    "\062\017\057\026\053\032\050\033\037\034\035\035\060" +
    "\036\043\037\054\054\041\001\002\000\036\007\ufff2\015" +
    "\ufff2\025\067\026\063\027\074\030\072\031\065\047\073" +
    "\050\066\051\076\052\071\053\070\055\064\056\077\001" +
    "\002\000\004\014\222\001\002\000\004\007\ufff4\001\002" +
    "\000\060\005\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014" +
    "\ufffa\016\ufffa\017\ufffa\022\ufffa\026\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\035\ufffa\036\ufffa\037\ufffa\041\ufffa\043\ufffa\044" +
    "\ufffa\054\ufffa\062\ufffa\064\ufffa\065\ufffa\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\014\005\013\006\005\012\010\001\001\000\004" +
    "\007\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\217\005\013\006\005\012\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\216\005\013\006" +
    "\005\012\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\024\015" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\030\001\001\000\010\005\032\006\005\013\031" +
    "\001\001\000\002\001\001\000\014\004\041\011\054\017" +
    "\035\020\043\021\045\001\001\000\010\005\032\006\005" +
    "\013\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\205\011\054\017\035\020\043\021\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\112\001" +
    "\001\000\004\021\111\001\001\000\004\021\110\001\001" +
    "\000\004\021\107\001\001\000\004\021\106\001\001\000" +
    "\004\021\105\001\001\000\004\021\104\001\001\000\004" +
    "\021\103\001\001\000\004\021\102\001\001\000\004\021" +
    "\101\001\001\000\002\001\001\000\004\021\100\001\001" +
    "\000\004\021\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\116\001\001\000\002\001\001\000\004\021\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\162\020\151\021\045\001\001" +
    "\000\006\020\155\021\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\146\021\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\151\021\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\164\021\045\001" +
    "\001\000\002\001\001\000\004\021\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\171\001\001\000" +
    "\002\001\001\000\004\016\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\213\015\023\001\001\000\002\001\001\000\014\004\215" +
    "\011\054\017\035\020\043\021\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\222\001\001\000\002\001\001\000\004\021" +
    "\224\001\001\000\002\001\001\000\004\007\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  

 public void report_error(String msg, Object info){
   if(info instanceof ComplexSymbol){
    int line = (((ComplexSymbol)info).getLeft().getLine())+1;
    int col  = (((ComplexSymbol)info).getRight().getColumn())+1;
    String val = (String)((ComplexSymbol)info).value;

    if(val == null) {
    throw new SyntaxErrorException(line, col);
    } else
    throw new SyntaxErrorException(val, line, col);


   }
  }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= HEAD Decls START Statements 
            {
              Programma RESULT =null;
		Location hxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xleft;
		Location hxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xright;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		Location declsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location declsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Programma(hxleft, hxright, "Programma", decls, s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Programma start_val = (Programma)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= Var_decl Decls 
            {
              Decls RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		VarDecl var = (VarDecl)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location declsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location declsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = decls.addChild(var); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= Def_decl Decls 
            {
              Decls RESULT =null;
		Location defxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location defxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		DeclsWrapper def = (DeclsWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location declsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location declsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Decls decls = (Decls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = decls.addChild(def);
			                                                                            decls.setLocation(declsxleft, declsxright);
			                                                                
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              Decls RESULT =null;
		 RESULT = new Decls(null, null, "Decls"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statements ::= Stat Statements 
            {
              Statements RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Statements stmt = (Statements)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = stmt.addChild(s);
                                                                                        stmt.setLocation(stmtxleft, stmtxright);
                                                                            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statements ::= 
            {
              Statements RESULT =null;
		 RESULT = new Statements(null, null, "Statements"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Var_decl ::= Type Var_decls_init SEMI 
            {
              VarDecl RESULT =null;
		Location tpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location tpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		TypeLeaf tp = (TypeLeaf)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location vdixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location vdixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		VarDeclsInit vdi = (VarDeclsInit)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new VarDecl(vdixleft, vdixright, "VarDecl", tp, vdi); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decl",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              TypeLeaf RESULT =null;
		Location interoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location interoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object intero = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new TypeLeaf(interoxleft, interoxright, "Type", "INT"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              TypeLeaf RESULT =null;
		Location boolxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location boolxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new TypeLeaf(boolxleft, boolxright, "Type", "BOOL"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= DOUBLE 
            {
              TypeLeaf RESULT =null;
		Location dblxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location dblxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object dbl = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new TypeLeaf(dblxleft, dblxright, "Type", "DOUBLE"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              TypeLeaf RESULT =null;
		Location strxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location strxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new TypeLeaf(strxleft, strxright, "Type", "STRING"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              TypeLeaf RESULT =null;
		Location chrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location chrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object chr = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new TypeLeaf(chrxleft, chrxright, "Type", "CHAR"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Var_decls_init ::= ID Var_init_value COMMA Var_decls_init 
            {
              VarDeclsInit RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		Location vivxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location vivxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		VarInitValue viv = (VarInitValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location vdixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location vdixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		VarDeclsInit vdi = (VarDeclsInit)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (viv == null)
																					? vdi.addChild(new VarNotInit(idxleft, idxright, "VarNotInit", new IdConst(idxleft, idxright,"Id", new Leaf(idxleft, idxright,"Value", id))))
																					: vdi.addChild(new VarInit(idxleft, idxright, "VarInit", new IdConst(idxleft, idxright,"Id", new Leaf(idxleft, idxright,"Value", id)), viv)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decls_init",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Var_decls_init ::= ID Var_init_value 
            {
              VarDeclsInit RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location vivxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location vivxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		VarInitValue viv = (VarInitValue)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (viv == null) 
																					? (new VarDeclsInit(idxleft, idxright, "VarDeclsInit")).addChild(new VarNotInit(idxleft, idxright,"VarNotInit", new IdConst(idxleft, idxright,"Id", new Leaf(idxleft, idxright, "Value", id))))
																					: (new VarDeclsInit(idxleft, idxright, "VarDeclsInit")).addChild(new VarInit(idxleft, idxright, "VarInit", new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id)), viv)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decls_init",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Var_init_value ::= ASSIGN Expr 
            {
              VarInitValue RESULT =null;
		Location assingxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location assingxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object assing = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new VarInitValue(exleft, exright, "VarInitValue", e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_init_value",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Var_init_value ::= 
            {
              VarInitValue RESULT =null;
		 RESULT = null; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_init_value",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Vars ::= ID COMMA Vars 
            {
              Vars RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location varsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location varsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Vars vars = (Vars)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = vars.addChild(new IdConst(idxleft, idxright,"Id", new Leaf(idxleft, idxright,"Value", id))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Vars",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Vars ::= ID 
            {
              Vars RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Vars(idxleft, idxright,"Vars").addChild(new IdConst(idxleft, idxright,"Id", new Leaf(idxleft, idxright, "Value", id))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Vars",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Def_decl ::= DEF ID LPAR Par_decls RPAR Body 
            {
              DeclsWrapper RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		Location parxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location parxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		ParDecls par = (ParDecls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new DefDeclPar(dxleft, dxright, "DefDecl", new IdConst(idxleft, idxright,"Id", new Leaf(idxleft, idxright,"Value", id)), par, b); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Def_decl",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Def_decl ::= DEF ID LPAR RPAR Body 
            {
              DeclsWrapper RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new DefDeclNoPar(dxleft, dxright, "DefDecl", new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id)), b); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Def_decl",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Var_decls ::= Var_decl Var_decls 
            {
              VarDecls RESULT =null;
		Location vdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location vdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location vdsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location vdsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		VarDecls vds = (VarDecls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = vds.addChild(vd);
                                                                                        vds.setLocation(vdxleft, vdxright);
                                                                            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decls",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Var_decls ::= 
            {
              VarDecls RESULT =null;
		 RESULT = new VarDecls(null, null, "VarDecls"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decls",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Par_decls ::= Par_type Type ID COMMA Par_decls 
            {
              ParDecls RESULT =null;
		Location parxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).xleft;
		Location parxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).xright;
		ParTypeLeaf par = (ParTypeLeaf)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xright;
		TypeLeaf type = (TypeLeaf)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location parDeclsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location parDeclsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		ParDecls parDecls = (ParDecls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = parDecls
																						.addChild(new ParDeclSon(parxleft, parxright, "ParDeclSon", par, type, new IdConst(idxleft, idxright,"Id", new Leaf(idxleft, idxright,"Value", id))));
																			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Par_decls",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Par_decls ::= Par_type Type ID 
            {
              ParDecls RESULT =null;
		Location parxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location parxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		ParTypeLeaf par = (ParTypeLeaf)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		TypeLeaf type = (TypeLeaf)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ParDecls(parxleft, parxright, "ParDeclsOp")
																						.addChild(new ParDeclSon(parxleft, parxright, "ParDeclSon", par, type, new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id))));
																			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Par_decls",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Par_type ::= IN 
            {
              ParTypeLeaf RESULT =null;
		Location inxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location inxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ParTypeLeaf(inxleft, inxright, "ParType", "IN"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Par_type",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Par_type ::= OUT 
            {
              ParTypeLeaf RESULT =null;
		Location outxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location outxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object out = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ParTypeLeaf(outxleft, outxright, "ParType", "OUT"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Par_type",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Par_type ::= INOUT 
            {
              ParTypeLeaf RESULT =null;
		Location inoutxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location inoutxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object inout = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ParTypeLeaf(inoutxleft, inoutxright, "ParType", "INOUT"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Par_type",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Body ::= LGPAR Var_decls Statements RGPAR 
            {
              Body RESULT =null;
		Location lgparxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xleft;
		Location lgparxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xright;
		Object lgpar = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		Location vdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location vdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		VarDecls vd = (VarDecls)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Body(vdxleft, vdxright, "Body", vd, s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Body",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stat ::= Vars READ SEMI 
            {
              Stat RESULT =null;
		Location varsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location varsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Vars vars = (Vars)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location readxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location readxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object read = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new ReadOp(readxleft, readxright, "ReadOp", vars); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stat ::= Args WRITE SEMI 
            {
              Stat RESULT =null;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location writexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location writexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object write = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new WriteOp(writexleft, writexright, "WriteOp", args); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stat ::= ID ASSIGN Args SEMI 
            {
              Stat RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		Location assingxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location assingxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Object assing = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Args e1 = (Args)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new AssignOp(assingxleft, assingxright, "AssignOp", new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id)), e1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stat ::= ID LPAR Args RPAR SEMI 
            {
              Stat RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new CallOp(idxleft, idxright, "CallOpWithArgs", new IdConst(idxleft, idxright,"Id", new Leaf(idxleft, idxright,"Value", id)), args); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stat ::= ID LPAR RPAR SEMI 
            {
              Stat RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		 RESULT = new CallOp(idxleft, idxright, "CallOp", new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= IF LPAR Expr RPAR THEN Body ELSE Body 
            {
              Stat RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		Location b1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location b1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Body b1 = (Body)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location b2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location b2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Body b2 = (Body)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new IfThenElseOp(exleft, exright,"IfThenElseOp", e, b1, b2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= IF LPAR Expr RPAR THEN Body 
            {
              Stat RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new IfThenOp(exleft, exright,"IfThenOp", e, b); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= FOR LPAR ID COLON Expr COLON Expr COLON INT_CONST RPAR Body 
            {
              Stat RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		Location startxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).xleft;
		Location startxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).xright;
		Expr start = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		Location endxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).xleft;
		Location endxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).xright;
		Expr end = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		Location incrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location incrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		String incr = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ForOp(fxleft, fxright, "ForOp", new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id)), start, end, new IntConst(incrxleft, incrxright, "IntConst", new Leaf(incrxleft, incrxright, "Value", incr)),b); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= FOR LPAR ID COLON Expr COLON Expr COLON MINUS INT_CONST RPAR Body 
            {
              Stat RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)).value;
		Location startxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).xleft;
		Location startxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).xright;
		Expr start = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		Location endxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).xleft;
		Location endxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).xright;
		Expr end = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		Location incrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location incrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		String incr = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ForOp(fxleft, fxright, "ForOp", new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id)), start, end, true, new IntConst(incrxleft, incrxright, "IntConst", new Leaf(incrxleft, incrxright, "Value", incr)),b); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= WHILE LPAR Expr RPAR DO Body 
            {
              Stat RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new WhileOp(exleft, exright,"WhileOp", e, b); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= ID INC SEMI 
            {
              Stat RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new PostFixInc(idxleft, idxright, "PostFixInc", new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= INC ID SEMI 
            {
              Stat RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new PreFixInc(idxleft, idxright, "PreFixInc", new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= ID DEC SEMI 
            {
              Stat RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new PostFixDec(idxleft, idxright, "PostFixDec", new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= DEC ID SEMI 
            {
              Stat RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new PreFixDec(idxleft, idxright, "PreFixDec", new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Args ::= Expr COMMA Args 
            {
              Args RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location argxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location argxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Args arg = (Args)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = arg.addChild(e);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Args",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Args ::= ID COMMA Args 
            {
              Args RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location argxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location argxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Args arg = (Args)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = arg.addChild(new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id)));
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Args",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Args ::= Expr 
            {
              Args RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Args(exleft, exright, "ArgsOp").addChild(e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Args",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location minusxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location minusxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new SubOp(minusxleft, minusxright, "SubOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location plusxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location plusxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new AddOp(plusxleft, plusxright, "AddOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location timesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location timesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object times = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new MultOp(timesxleft, timesxright, "MultOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr ::= Expr MOD Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location modxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location modxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ModOp(modxleft, modxright, "ModOp", e1,e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location divxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location divxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new DivOp(divxleft, divxright, "DivOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location andxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location andxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new AndOp(andxleft, andxright, "AndOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location orxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location orxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new OrOp(orxleft, orxright, "OrOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location gtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location gtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new GtOp(gtxleft, gtxright, "GtOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location gexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location gexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object ge = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new GeOp(gexleft, gexright, "GeOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location lexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location lexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LeOp(lexleft, lexright, "LeOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location ltxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location ltxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LtOp(ltxleft, ltxright, "LtOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		Location eqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location eqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new EqOp(eqxleft, eqxright, "EqOp", e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		Location minusxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location minusxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UminusOp(minusxleft, minusxright, "UminusOp", e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		Location notxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location notxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new NotOp(notxleft, notxright, "NotOp", e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BoolConst(txleft, txright, "BoolConst", new Leaf(txleft, txright, "Value", "true")); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BoolConst(fxleft, fxright, "BoolConst", new Leaf(fxleft, fxright, "Value", "false")); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= ID 
            {
              Expr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new IdConst(idxleft, idxright, "Id", new Leaf(idxleft, idxright, "Value", id)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= INT_CONST 
            {
              Expr RESULT =null;
		Location intConstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location intConstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		String intConst = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new IntConst(intConstxleft, intConstxright, "IntConst", new Leaf(intConstxleft, intConstxright, "Value", intConst)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= DOUBLE_CONST 
            {
              Expr RESULT =null;
		Location doubleConstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location doubleConstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		String doubleConst = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new DoubleConst(doubleConstxleft, doubleConstxright, "DoubleConst", new Leaf(doubleConstxleft, doubleConstxright,"Value", doubleConst)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= CHAR_CONST 
            {
              Expr RESULT =null;
		Location charConstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location charConstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		String charConst = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new CharConst(charConstxleft, charConstxright, "CharConst", new Leaf(charConstxleft, charConstxright, "Value", charConst)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		Location stringConstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xleft;
		Location stringConstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ParserCup$stack.peek()).xright;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new StringConst(stringConstxleft, stringConstxright, "StringConst", new Leaf(stringConstxleft, stringConstxright, "Value", stringConst)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
